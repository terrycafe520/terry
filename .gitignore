数据传播操作一：  复制（（把自己赋给一个新的变量））
复制数据的时候，如果是基本类型；产生的是数据副本，改变副本并不影响原来的数据;
var a = 10;
	var b = a;
	b++;
	console.log(a,b);
  结果是  10 11;
  
  
  
但是如果是对象数组的引用类型，复制的是数据的地址；
结果的都跟着引用类型改变

var a = [1,2,3];
	var b = a;
	b[0] = 99;
	console.log(a,b);
    
test.html:11 [99, 2, 3] [99, 2, 3]

数据传播操作二： 数据作为参数传播，数据的储存是基本的就是值，实际传递的就是值，函数内部改变，并不影响；
function swap(a,b){
	var temp;
	temp = a ;
	a % b != 0;
	b = temp ;
	// console.log(a,b);
}
var x = 10 ;
var y = 20;
swap(x,y);


函数运行调用的结果是 10 20 

但是如果储存的方式是对象方法类型的，引用的值；跟着函数内部进行改变；结果的都跟着引用类型改变
var Vector =function（）{};
Vector.reverse = function(vector){
	vector.x = - vector.x;
	vector.y = - vector.y;



}

var v = {x : 1, y:2};
Vector.reverse(v);
v的值随着函数内部改变；


数据传播操作三：比较大小。返回布尔值 引用地址的比较显然无意义；



数组的遍历：
 	var arr = [1,2,3,4,50];
 	for(var i = 0 ; i <= arr.length - 1;i++){
 		console.log(arr[i]);
 	}
    // arr.length 是数组内部存了多少个数据  5个数字 遍历的时候
    // 从0开始 0 1 2 3 4 i=0 1 2 3 4 所以i <=(5-1)


案列计算阶乘之和：

var arr = [1,2,3,4,5,6,7];
	var sum = 0 ;
	for(var i = 0 ;i < arr.length ; i++){
		sum += jiecheng(arr[i])
	}
	console.log(sum);
	// 取出每一项；

	// 阶乘函数
	function jiecheng(a){
		if(a == 0 ){
			return 1;

		}else{
			var mul = 1;
			for(var i = 1 ; i <= a ; i++){
				mul *= i;
			}
			return mul;
		}


数组的方法：
首尾操作：
        1.
	var arr = [1,2,3,4,5];
	console.log(arr.push(8));  结果是6   push拉长
	2.
	var arr = [1,2,3,4,5];
	console.log(arr.push("8",10,true,[2,3]));  结果是9   push拉长
	 //console.log(arr)会是[1,2,3,4,5，"8",10,true,[arry2])]
	3.
	var arr = [1,2,3,4,5];
	console.log(arr.pop());
	console.log(arr);
	结果是[1,2,3,4]
	4.
	//unshift() 在数组开头添加一个或多个元素，并返回数组的新长度。
		console.log(arr.unshift("haha"));
		console.log(arr);
	5.shift() 从数组移出第一个元素，并返回该元素。
            console.log(arr.shift());
            console.log(arr);	

合并和拆分
	1.concat
        var arr = [1,2,3,4,5];
	var arr2= [8,9,10,11]
	var arr3 = arr.concat(arr2);
	2.slice() 从数组提取一个片段，并作为一个新数组返回
	var arr = [1,2,3,4,5,6,7,8,9,10,11];
	var arr2= arr.slice(3,8)
	console.log(arr2);
	结果是[4,5,6,7,8]     不写end：表示从start开始截取到最后一个数据。
	3.splice() 方法用于插入、删除或替换数组的元素
	var arr = [1,2,3,4,5,6,7,8,9,10,11];
	arr.splice(3,5);
	console.log(arr);
	删除则arr.splice(3,5); 删除第四项开始后面5位；5代表的不是下标而是个数  
	插入则arr.splice(3,0,"5");  插一定加0 告知是插入 内容写后面
	替换则arr.splice(3,4,"hahhhha","xixi"),从第三项之后，删除5项目，替换成我们给的数字；
倒序
	1.
	var arr =["A,B,C,D,E,F"];
	arr.reverse();
	console.log(arr);
		自己犯错的地方字符串没有加引号，会被认为是A未定义；
	var arr = [1,2,3,4,5,6,7,8,9,10,11,12];				

	console.log(arr.reverse());
	2.
	排序、默认情况，比较字符编码顺序
		arr.sort();
		console.log(arr);
转字符串
      1. join() 将数组的所有元素连接成一个字符串。
         join加入的意思，在数组数据之间加入一个连字符，整体连城一个字符串。
         连字符：join方法的参数。不传参数，默认逗号是连字符。
         数组转成字符串，用新变量接收。
	 
	 
	
	
正则表达式：是引用类型，主要功能是匹配模型，类型也是对象；保存的是地址，用下标索引跟机器沟通；是对象的话  就可以作为参数；
案例：正确输入一个电话号码，010-12345678.用户输入正确返回一个right，错误返回一个wrong。
	var num = prompt("qingshuru ");
 	var reg = /^\d{3}\-\d{8}$/;
 	if(reg.test(num)){
 		alert("right");

 	}else{
 		alert("wrong");
 	}	    
	    
	1.split和join是相反的，案例为空格分割成新的数组；有参数则参数当做逗号
	splice的话是插入删除，数据的形式不变
		
	var str = "aa bbb   c  dd  eeeeeee";
	var arr = str.split(/\s+/);
	console.log(arr);
	结果：["aa", "bbb", "c", "dd", "eeeeeee"]
	
	2.match  默认找到第一个组成的数组，可以支持模糊匹配(/a+/g)，(/o\s+o/g)
	var str =  "bbaacaaaadddaeeeeeaaf";
 	var arr = str.match("a");
 	console.log(arr);
	3.search不支持全局g,都是第一个匹配位置；
	var str = "aaa o o bbb o   ooo  aaa";
 	console.log(str.search(/o\s+o/g));
	4.最常见的是replace；2个参数，删除的和替换的
	改网址var str = "www.hello.com";
	str = str.replace("hello","byebye");
	console.log(str);
	另外一种方式。改网址：
	str = str.replace(/\.(\w+)\./,function(match,$1){
			return ".byebye.";
	过滤字符串中空格方法：	
	var str = "aa b   c d e f ";
	str = str.replace(/\s+/g,"");
	console.log(str);		
	
	
正则表达式方法：
谁的方法，谁打点调用：
字符串.字符串方法（）
正则表达式.正则方法（）
本质是在字符串里面去找出或者测试是不是符合正则表达式；	
	1.exec（）
	var reg = /abc/g；//注意要先定义正则；告知要匹配的内容，用正则表达出来；
	var str = "alsefhhaghkgkgkhdhjkl jkgh abc";
	var arr =reg.exec(str);
	console.log(arr);
	console.log(arr.index);
	2.test（）
	var reg = /abc/;
	var str = "aabbccddabchgjkhogjlghhkjg";
	console.log(reg.test(str));// 结果是true；
	console.log(str.search(reg));//结果是12
	可以直接在控制台：
	/\s+/.test("abc ad eo");
	
	
arguments对象初步认识：
	只要掌握arguments.length and arguments[];
	与数组类似但是没有数组的方法。
	原理是如果定义2个函数相同的参数，那么前面一个函数会被覆盖，不执行。这时候想如何才能让同一个函数，有不同的效果，传入的参数都是一样的，但是可以通过arguments
	对实际参数的调用，改变参数的列表，从而影响到函数的不同结果。因为函数的参数传播可以不一致，这样就诞生了arguments这样的对象，里面把所有的实际参数都存储起来
	并且可以通过下标或者长度进行调用；这样一个函数可以有多种结果；应该是说同一个函数里面可以变化，比如利用arguments的长度来判断，传入的参数个数，是1个执行什么，
	多个又执行什么；
	1. function sum(a,b){
		switch(arguments.length){
			case 1:
			return ++a;
			break;
			case 2:
			return a + b;
			break;
		}
	console.log(sum(a,b));
	}
	sum(45,436,457,34,23,12);（解决的是需要不断给实际参数让函数得到不一样的结果，
	arguments让在一个实际参数组里面，去选择传导的参数，）
	案例：<script>

	 function sum(a,b){
		switch(arguments.length){
			case 1:
			return ++a;
			break;
			case 2:
			return a + b;
			break;
		}
	console.log(sum(a,b));
	console.log(arguments[3]);
	}
	sum(45,436,457,34,23,12);
	</script>
	输出结果是
	481
        34
	这中间解决的批量处理的问题是，不用每次都个函数去传递参数，可以直接罗列在一起，然后通过arguments访问到，得到不同的结果；



	

DOM体验：
	1.获取元素  添加事件的函数；
	var odiv = document.getElementById("box");
	var okala = document.getElementById("kaola");
	odiv.obclick = function(){
		odiv.style.backgroundColor = "yellow";
		okaola.src ="images/kaola2.jpeg";
	}
	

